using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using UnityEngine;

namespace CamOpr.Tool
{
    public interface ISerialize
    {
         void ToXML();
         void Serialize(string filename);
         void Deserialize(string filename);
    }

    public class PathTool : BaseCameraMode, ICameraMode
    {
        public override string Name { get; set; }

        //ユーザー制御点
        private readonly List<CameraConfig> _knots = new List<CameraConfig>();
        public ReadOnlyCollection<CameraConfig> Knots => _knots.AsReadOnly();
        public int KnotsCount => _knots.Count;

        //ユーザー制御注視点
        private readonly List<CameraConfig> _lookAts = new List<CameraConfig>();
        public ReadOnlyCollection<CameraConfig> LookAts => _lookAts.AsReadOnly();
        public int LookAtsCount => _lookAts.Count;

        //Bezier計算結果
        protected ExtendBezierControls Positions { get; private set; }
        public int PositionsCount => Positions.SegmentCount;
        public float TotalLength => Positions.TotalLength;
        public int PositionsPointsCount => Positions.Points.Length;

        protected ExtendBezierControls Rotations { get; private set; }
        public int RotationsCount => Positions.SegmentCount;
        public int RotationsPointsCount => Positions.Points.Length;

        private int Iteration = 5;
        [SerializeField]
        public bool IsLoop = false;
        [SerializeField]
        public bool IsCoordinateControl = false;
        [SerializeField]
        public ushort Time = 10;
        [SerializeField]
        public ushort Step = 5;

        [SerializeField]
        public bool IsCameraShake = false;
        [SerializeField]
        public bool IsApplyCamera = true;
        [SerializeField]
        public bool IsAutoTimeSetting = true;

        protected CameraConfig defaultCameraConfig { get; set; }

        public Render render;
        public Serializer serializer;
        public PerlinCameraShake CameraShake;

        /* Debug用変数 **/
        [SerializeField]
        public float dist = 0;
        [SerializeField]
        public float distall = 0;
        [SerializeField]
        public float diffT = 0;
        [SerializeField]
        private Vector3 bef = Vector3.zero;
        [SerializeField]
        private float befT = 0;
        /* Debug用変数ここまで **/

        private Vector3 _nowMousePosi; // 現在のマウスのワールド座標
        IEnumerator enumPlay = null;
        void Update()
        {
            // diffTMonitor.Sample(diffT);
            // distMonitor.Sample(dist);
            // befTMonitor.Sample(befT);
        }

        public void Awake()
        {
            render = gameObject.AddComponent<Render>();
            serializer = gameObject.AddComponent<Serializer>();
            //CameraShake = gameObject.AddComponent<PerlinCameraShake>();
            //CameraShake.enabled = true;
        }

        public void CoordinateControl()
        {
            //TODO
            IsCoordinateControl = !IsCoordinateControl;
        }

        void OnValidate()
        {
            SetBezierFromKnots();
        }

        /// <summary>
        /// ControlPointのリストからPathを算出する
        /// Calculating a Instance from a list of ControlPoints
        /// </summary>
        public void SetBezierFromKnots()
        {
            Positions = KCurves.CalcBeziers(_knots.Where(data => data.ApplyItems.position == true).Select(data => data.Position).ToArray(), Iteration, IsLoop) as ExtendBezierControls;
            if (Positions.SegmentCount >= 3)
            {
                int segment;
                Vector3[] divPositions = SplitSegments(Positions, out segment, IsLoop);
                Positions = new ExtendBezierControls(segment, divPositions, IsLoop);
            }

            foreach (var knot in Knots)
            {
                var vec = new Vector3(knot.Rotation.normalized.x, knot.Rotation.normalized.y, knot.Rotation.normalized.z);
                Debug.Log("変換前：" + knot.Rotation.eulerAngles);
                Debug.Log("変換後：" + new Quaternion(vec.x, vec.y, vec.z, 1).eulerAngles);
                Debug.Log("変換前：" + knot.Rotation);
                Debug.Log("変換後：" + new Quaternion(vec.x, vec.y, vec.z, 1));
                Debug.Log("log変換前：" + knot.Rotation.eulerAngles);
                Debug.Log("log変換後：" + CamOprTransformUtils.ConvertLogQuaternion(CamOprTransformUtils.LogQuaternion(knot.Rotation)).eulerAngles);
            }

            Rotations = KCurves.CalcBeziers(_knots.Where(data => data.ApplyItems.position == true).Select(data => CamOprTransformUtils.LogQuaternion(data.Rotation)).ToArray(), Iteration, IsLoop) as ExtendBezierControls;
            if (Rotations.SegmentCount >= 3)
            {
                int segment;
                Vector3[] divRotations = SplitSegments(Rotations, out segment, IsLoop);
                Rotations = new ExtendBezierControls(segment, divRotations, IsLoop);
            }

            Display();
        }


        /// <summary>
        /// カーソルの位置のknotを取得する
        /// Get the knot at the cursor position
        /// </summary>
        public int GetCursorPositionKnot(out GameObject selectedKnot)
        {
            var output = Output(Step, IsLoop);

            var outputRot = OutputRotations(Step, IsLoop);

            int i = -1;
            render.bezierObject.Select(g => g.layer = 0);
            Vector3 pos = Input.mousePosition;
            RaycastHit hit;
            Ray ray = Camera.main.ScreenPointToRay(pos);

            if (Physics.Raycast(ray, out hit))
            {
                selectedKnot = render.bezierObject.Find(g => g == hit.collider.gameObject);
            }
            else
            {
                selectedKnot = null;
            }

            return i;
        }

        /// <summary>
        /// knotを移動させる
        /// Move the knot
        /// </summary>
        public void MoveKnot()
        {
            render.bezierObject.Select(g => g.layer = 0);

            Vector3 nowmouseposi = Input.mousePosition;
            Vector3 diffposi;
            RaycastHit hit;

            Ray ray = Camera.main.ScreenPointToRay(nowmouseposi);

            GetCursorPositionKnot(out GameObject selectedKnot);

            if (Physics.Raycast(ray, out hit))
            {
                // 現在のマウスのワールド座標を取得
                nowmouseposi = Camera.main.ScreenToWorldPoint(Input.mousePosition);
                // 一つ前のマウス座標との差分を計算して変化量を取得
                diffposi = nowmouseposi - _nowMousePosi;
                //　Y成分のみ変化させる
                diffposi.x = 0;
                diffposi.z = 0;
                // 開始時のオブジェクトの座標にマウスの変化量を足して新しい座標を設定
                GetComponent<Transform>().position += diffposi;
                // 現在のマウスのワールド座標を更新
                _nowMousePosi = nowmouseposi;

                Debug.Log("Move Knot Succeed");
                Display();
            }
            render.bezierObject.Select(g => g.layer = 2);
        }

        /// <summary>
        /// Path上のカーソルの位置を取得する
        /// Get the position of the cursor on the Instance
        /// </summary>
        public float GetCursorPositionPath()
        {
            if (render.LineMesh == null)
            {
                var output = Output(Step, IsLoop);
                var outputRot = OutputRotations(Step, IsLoop);
                Debug.Log(outputRot);
                List<Vector3> mergedList = new List<Vector3>(output.Length + outputRot.Length);
                mergedList.AddRange(output);
                mergedList.AddRange(outputRot);

                render.LineMesh.RenderPipe(mergedList.ToArray());
            }

            render.LineMesh.gameObject.layer = 0;

            float t = 0;
            Vector3 pos = Input.mousePosition;
            RaycastHit hit;

            Ray ray = Camera.main.ScreenPointToRay(pos);

            if (Physics.Raycast(ray, out hit))
            {
                t = findClosest(hit.point);
            }

            render.LineMesh.gameObject.layer = 2;
            return t;
        }

        public void StartPlay()
        {
            enumPlay = Play();
            StartCoroutine(enumPlay);
        }

        /// <summary>
        /// カメラモーションを再生する
        /// Play camera motion
        /// </summary>
        public IEnumerator Play()
        {
            List<CameraConfig> tempKnots = _knots;
            defaultCameraConfig = CameraUtil.CameraPosition();
            float totalTime = _knots.Where(data => data.ApplyItems.position == true).Select(data => data.Time).Sum();

            Positions.SetParameter(IsLoop);
            Rotations.SetParameter(IsLoop);

            float baseSpeed = MaxSpeed(Time);

            var posTransition = new BezierTransition(_knots, Positions);
            var rotTransition = new BezierTransition(_knots, Rotations);

            float[] times = IsAutoTimeSetting ? AutoTimeSetting() : null;

            var easingModes = SetEasingMode();

            float posT = 0f, rotT = 0f, progressRotLength = 0f, progressLength = 0f, currentTime = 0f;

            // 停止時間が設定されている場合、指定秒数間処理を待機
            if (tempKnots[0].Delay != 0f) yield return new WaitForSeconds(tempKnots[0].Delay);

            EasingMode currentMode = (EasingMode)((byte)easingModes[1] | ((byte)easingModes[0] << 1));

            while (true)
            {
                // positonとrotationを適用
                if (posT <= Positions.SegmentCount)
                {
                    Vector3 pos = CalcPosition(posTransition.currentBezierIndex, posT);
                    float _rotT = progressLength / posTransition.KnotsBetweenLength;
                    //Quaternion rot = ConvertLogQuaternion(Vector3.Lerp(LogQuaternion(Knots[posTransition.currentKnotIndex].Rotation), LogQuaternion(Knots[posTransition.currentKnotIndex+1].Rotation), _rotT));
                    Quaternion rot = CamOprTransformUtils.SplineQuaternion(ref tempKnots, posTransition.currentKnotIndex, _rotT);
                    //Quaternion rot = ConvertLogQuaternion(CalcRot(rotTransition.currentBezierIndex, rotT));

                    if (IsCameraShake)
                    {
                        CameraShake.ShakeJob(ref pos, ref rot);
                    }

                    if (IsApplyCamera)
                    {
                        Camera.main.transform.position = pos;
                        Camera.main.transform.rotation = rot;
                    }
                    else
                    {
                        render.moveCameraCube.transform.position = pos;
                        render.moveCameraCube.transform.rotation = rot;
                    }
                }

                posTransition.Play(ref progressLength, posTransition.currentKnotIndex, posTransition.currentBezierIndex);
                rotTransition.Play(ref progressRotLength, rotTransition.currentKnotIndex, rotTransition.currentBezierIndex);

                // 停止時間が設定されている場合、指定秒数間処理を待機
                if (tempKnots[posTransition.currentKnotIndex].Delay != 0f) yield return new WaitForSeconds(tempKnots[posTransition.currentKnotIndex].Delay);

                if (posTransition.currentBezierIndex == Positions.SegmentCount) break;

                Debug.Log("[Positions] "+" progressLength:" + progressLength + " KnotsBetweenLength:" + posTransition.KnotsBetweenLength + "progressLength / KnotsBetweenLength = " + progressLength / posTransition.KnotsBetweenLength);
                Debug.Log("[Rotations] "+" progressLength:" + progressRotLength + " KnotsBetweenLength:" + rotTransition.KnotsBetweenLength + "progressLength / KnotsBetweenLength = " + progressRotLength / rotTransition.KnotsBetweenLength);

                currentMode = (EasingMode)((byte)easingModes[posTransition.currentKnotIndex + 1] | ((byte)easingModes[posTransition.currentKnotIndex] << 1));

                posT = GetT(posTransition.currentBezierIndex, progressLength, Positions);

                rotT = GetT(posTransition.currentBezierIndex, progressRotLength, Rotations);

                DebugDifCalculation(posTransition.currentBezierIndex, rotT);
                Mathf.Clamp(rotT, 0f, 1f);

                float dt = UnityEngine.Time.deltaTime;
                currentTime += dt;

                float ea = Easing.GetEasing(currentMode, progressLength / posTransition.KnotsBetweenLength);

                if (IsAutoTimeSetting)
                {
                    if(times != null)
                    {
                        progressLength += dt / times[posTransition.currentKnotIndex] * posTransition.KnotsBetweenLength;
                    }
                }
                else
                {
                    progressLength += dt / tempKnots[posTransition.currentKnotIndex].Time * posTransition.KnotsBetweenLength;
                }

                progressRotLength = Mathf.Clamp(progressLength / posTransition.KnotsBetweenLength, 0f, 1f) * rotTransition.KnotsBetweenLength;

                yield return null;
            }

            if (IsApplyCamera)
            {
                Camera.main.transform.position = defaultCameraConfig.Position;
                Camera.main.transform.rotation = defaultCameraConfig.Rotation;
            }
            else
            {
                render.moveCameraCube.transform.position = defaultCameraConfig.Position;
                render.moveCameraCube.transform.rotation = defaultCameraConfig.Rotation;
            }

            yield break;
        }

        private static float GetT(int targetBezierIndex,float progressLength, ExtendBezierControls bezierList)
        {
            if (targetBezierIndex == 0 || targetBezierIndex % 2 == 1)
            {
                float easing = progressLength;

                return bezierList.GetT(targetBezierIndex, easing);
            }
            else
            {
                float easing = progressLength - bezierList.Length(targetBezierIndex - 1);

                return bezierList.GetT(targetBezierIndex, easing);
            }
        }

        private void DebugDifCalculation(int targetBezierIndex,float t)
        {
            {
                //debug用変数
                diffT = t - befT;
                //Debug.Log("param:" + diffT);
                befT = t;
                Vector3 now = CalcPosition(targetBezierIndex, t);

                distall += dist;
                dist = Vector3.Distance(bef, now);
                bef = now;
                //Debug.Log("dist:" + dist);
            }
        }

        /// <summary>
        /// Knot間の時間を長さをもとに計算する
        /// Calculate the time between Knot based on the length
        /// </summary>
        private float[] AutoTimeSetting()
        {

            float[] times = new float[KnotsCount];
            for(int i = 0; i < KnotsCount-1 ; i++)
            {
                times[i] = GetBetweenRange(i)/ Positions.TotalLength * Time; 
            }

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < times.Length; i++)
            {
                sb.Append(times[i]);
                if (i != times.Length) sb.Append(", ");
            }
                
            Debug.Log(sb.ToString());
            return times;
        }

        /// <summary>
        /// Knot間の長さを取得する
        /// Get the length between Knots
        /// </summary>
        private float GetBetweenRange(int index)
        {
            float betweenRange = 0;

            if (index == 0 || index == KnotsCount - 1)
            {
                betweenRange = Positions.Length(index);
            }
            else
            {
                for (ushort j = (ushort)(2 * index - 1); j < Positions.SegmentCount && j <= 2 * index; j++)
                {
                    betweenRange += Positions.Length(j);
                }
            }

            return betweenRange;
        }

        private Vector3 CalcPosition(int bezierIndex, float t)
        {
            return BezierUtil.Position(Positions[bezierIndex, 0], Positions[bezierIndex, 1], Positions[bezierIndex, 2], t % 1);
        }

        private Vector3 CalcRot(int bezierIndex, float t)
        {
            return BezierUtil.Position(Rotations[bezierIndex, 0], Rotations[bezierIndex, 1], Rotations[bezierIndex, 2], t % 1);
        }

        private Quaternion CalcRotation(ref List<CameraConfig> Knots,int knotIndex, float ratio)
        {
            Quaternion rotation = CamOprTransformUtils.SplineQuaternion(ref Knots, knotIndex, ratio);

            if (_lookAts.Count != 0)
            {
                if (Knots[knotIndex].IsLookAt || Knots[knotIndex+1].IsLookAt)
                {
                   // rotation = Vector3.Lerp(Knots[knotIndex].isLookAt ? (Quaternion.LookRotation(LookAts[0].position) * new Quaternion(1, -1, 1, 1)).eulerAngles : rotation,
                   //                        Knots[knotIndex+1].isLookAt ? (Quaternion.LookRotation(LookAts[0].position) * new Quaternion(1, -1, 1, 1)).eulerAngles : rotation, ratio);
                }
            }

            // rotation.z = 0f;
            // rotation.w = 0f;
            return rotation;
        }

        private EasingMode[] SetEasingMode()
        {
            var list = _knots.Select(x => x.EasingMode).ToArray();
            if (list[0] == EasingMode.Auto)
            {
                list[0] = EasingMode.None;
            }
            if (list[list.Length - 1] == EasingMode.Auto)
            {
                list[list.Length - 1] = EasingMode.None;
            }

            return list;
        }

        /// <summary>
        /// 座標のセグメントを分割してユーザー制御点をベジェ制御点に追加する
        /// Split segments and add user control points to Bezier control points
        /// </summary>
        private static Vector3[] SplitSegments(ExtendBezierControls Positions, out int dividedSegmentCount, bool IsLoop)
        {


            if (IsLoop)
            {
                dividedSegmentCount = (Positions.SegmentCount * 2 - 1);
            }
            else
            { 
                dividedSegmentCount = (Positions.SegmentCount - 2) * 2;
            }

            Debug.Log("Positions.SegmentCount:" + Positions.SegmentCount);
            Debug.Log("dividedSegmentCount:" + dividedSegmentCount);

            Vector3[] dividedPoints = new Vector3[IsLoop ? dividedSegmentCount * 2 + 4 : dividedSegmentCount * 2 + 1];

            ushort segCnt = (ushort)(IsLoop ? Positions.SegmentCount : Positions.SegmentCount - 1);


            ushort index = 0;
            int i = IsLoop ? 0 : 1;
            for (; i < segCnt; i++)
            {
                Vector3[] result = BezierUtil.Divide(positions[i, 0], positions[i, 1], positions[i, 2], (float)positions.Ts[i]);
                int condition = (i == segCnt - 1 && IsLoop) ? 4 : 3;
                for (int j = 0; j <= condition; j++, index++)
                {
                    dividedPoints[index] = result[j];
                }
            }

            if (!IsLoop)
            {
                dividedPoints[dividedPoints.Length - 1] = positions[segCnt, 0];
            }
            return dividedPoints;
        }


        /// <summary>
        /// stepごとの座標のリストを返す
        /// Returns a list of coordinates for each step
        /// </summary>
        public Vector3[] Output(ushort step, bool isLoop)
        {
            if (Positions is null)
            {
                SetBezierFromKnots();
            }

            return Positions.CalcPlots(step, isLoop);
        }

        public Vector3[] OutputRotations(ushort step, bool isLoop)
        {
            if (Rotations is null)
            {
                SetBezierFromKnots();
            }

            return Rotations.CalcPlots(step, isLoop);
        }

        public void AddKnot(Vector3 position, Quaternion rotation, float fov)
        {
            this._knots.Add(new CameraConfig(position, rotation, fov));
            if (_knots.Count == 0)
            {
                render.moveCameraCube.transform.position = _knots[0].Position;
            }
            SetBezierFromKnots();
        }

        /// <summary>
        /// Knotを追加する
        /// Returns a list of coordinates for each step
        /// </summary>
        /// <param name="cp">カメラ設定</param>
        /// <param name="param">t</param>
        public void AddKnot(CameraConfig cp, float? param = null)
        {
            if (param != null)
            {
                var ft = (float)param;
                int bezierIndex = (int)Math.Floor(ft);
                int knotIndex = bezierIndex % 2 == 0 ? (bezierIndex / 2) : (bezierIndex + 1) / 2;
                Debug.Log("ft:" + ft + " " + bezierIndex + " " + knotIndex);
                Vector3 position = CalcPosition((int)Math.Floor(ft), ft % 1);
                Quaternion rotation = Quaternion.Lerp(_knots[knotIndex].Rotation, _knots[knotIndex].Rotation, bezierIndex % 2 == 0 ? ft % 1 : ft);
                float fov = Mathf.Lerp(_knots[knotIndex].Fov, _knots[knotIndex].Fov, bezierIndex % 2 == 0 ? ft % 1 : ft);

                this._knots.Insert(knotIndex + 1, new CameraConfig(position, rotation, fov));
            }
            else
            {
                this._knots.Add(cp);
                if (_knots.Count == 0)
                {
                    render.moveCameraCube.transform.position = _knots[0].Position;
                }
            }

            SetBezierFromKnots();
        }

        public void RemoveKnot()
        {
            this._knots.RemoveAt(_knots.Count - 1);
            SetBezierFromKnots();
        }


        /// <summary>
        /// 中間地点にknotを追加する
        /// Add a Knot in the middle
        /// </summary>
        public void AddKnotMiddle()
        {
            if (render.LineMesh == null)
            {
                var output = Output(Step, IsLoop);
                var outputRot = OutputRotations(Step, IsLoop);
                Debug.Log(outputRot);
                List<Vector3> mergedList = new List<Vector3>(output.Length + outputRot.Length);
                mergedList.AddRange(output);
                mergedList.AddRange(outputRot);

                render.LineMesh.RenderPipe(mergedList.ToArray());
            }
            render.LineMesh.gameObject.layer = 0;

            float t = GetCursorPositionPath();
            AddKnot(CameraUtil.CameraPosition(), t);
            Debug.Log("Insert Knot Succeed");
            Display();

            render.LineMesh.gameObject.layer = 2;

        }

        public void Display()
        {
            render.Display( Knots, Positions, Output(Step, IsLoop), OutputRotations(Step, IsLoop), KnotsCount, Positions.SegmentCount);
        }

        public void AddLookAt(Vector3 position, Quaternion rotation, float fov)
        {
            this.LookAts.Add(new CameraConfig(position, rotation, fov));
            SetBezierFromKnots();
        }

        public void AddLookAt(CameraConfig cp, float? t = null)
        {
            //TODO tを指定した場合の処理を追記する
            this.LookAts.Add(cp);
            SetBezierFromKnots();
        }

        public void RemoveLookAt()
        {
            this.LookAts.RemoveAt(Knots.Count - 1);
            SetBezierFromKnots();
        }

        private float MaxSpeed(int time)
        {
            if (!Positions.IsCalcTotalLength) {
                Positions.SetParameter(IsLoop);
            }

            return Positions.TotalLength / time;
        }

        public float findClosest(Vector3 cursor)
        {
            int step = 5;
            int index = 5;
            var output = Output(5, IsLoop);
            float distance = float.MaxValue;

            foreach (var v in output.Select((p, i) => new { p, i }))
            {
                dist = Vector3.Distance(v.p, cursor);
                if (dist < distance)
                {
                    distance = dist;
                    index = v.i;
                }
            }

            float t = (float)index / step;
            distance = float.MaxValue;

            for ( float j = 1; j > 0.01; j /= 2 )
            {
                if (distance < 0.01) break;
                for (float k= t - j; k <= t + j; k += j/2)
                {
                    if (0> k || Positions.SegmentCount < k) continue;
                    dist = Vector3.Distance(CalcPosition((int)Math.Floor(k), k % 1), cursor);
                    if (dist < distance)
                    {
                        distance = dist;
                        t = k;
                    }
                }
            }

            Debug.Log(t);
            render.moveCameraCube.transform.position = CalcPosition((int)Math.Floor(t), t % 1);

            return t;
        }

        public class Render:MonoBehaviour
        {
            public GameObject moveCameraCube;
            public LineRenderer LineRendererRotation;

            public LineRenderer LineRenderer;

            public List<GameObject> inputCube = new List<GameObject>();
            public List<GameObject> inputCubeVector = new List<GameObject>();

            public List<GameObject> bezierObject = new List<GameObject>();

            public PipeMeshGenerator LineMesh;

            private void Awake()
            {

                LineRenderer = gameObject.AddComponent<LineRenderer>();//LineRendererRotationとLineRenderer１つ目のLineRendererしか表示されない
                LineRendererRotation = gameObject.AddComponent<LineRenderer>();

                moveCameraCube = new GameObject("moveCameraCube");
                moveCameraCube = GameObject.CreatePrimitive(PrimitiveType.Cube);
                moveCameraCube.transform.localScale = new Vector3(0.2f, 0.2f, 0.5f);
                moveCameraCube.GetComponent<Renderer>().material.color = Color.blue;
                moveCameraCube.transform.parent = gameObject.transform;
                moveCameraCube.layer = 2;
                LineMesh = gameObject.AddComponent<PipeMeshGenerator>();
                LineMesh.gameObject.layer = 2;

            }


            public void Display( List<CameraConfig> knot , ExtendBezierControls positions, Vector3[] output, Vector3[] outputRot, int KnotCount, int SegmentCount)
            {
                for (int i = 0; i < bezierObject.Count; i++)
                {
                    Destroy(bezierObject[i]);
                }
                bezierObject.Clear();

                for (int i = 1; i < SegmentCount - 1; i++)
                {
                    bezierObject.Add(new GameObject("bezierControl" + i));
                    bezierObject[i - 1] = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    bezierObject[i - 1].transform.position = positions[i, 0];

                    bezierObject[i - 1].transform.localScale = new Vector3(0.15f, 0.15f, 0.15f);
                    bezierObject[i - 1].transform.parent = transform.parent;
                    bezierObject[i - 1].GetComponent<Renderer>().material.color = Color.red;
                    bezierObject[i - 1].layer = 2;
                }


                if (LineRenderer != null)
                {
                    //cube = new GameObject[output.Length];

                    LineRenderer.material = new Material(Shader.Find("Sprites/Default"));
                    LineRenderer.positionCount = output.Length;
                    LineRenderer.startWidth = 0.1f;
                    LineRenderer.endWidth = 0.1f;
                    LineRenderer.startColor = Color.white;
                    LineRenderer.endColor = Color.black;
                    for (int i = 0; i < output.Length; i++)
                    {
                        Debug.Log(outputRot[i]);

                        LineRenderer.SetPosition(i, output[i]);
                    }
                }
                if (LineRendererRotation != null)
                {
                    //cube = new GameObject[output.Length];
 
                    LineRendererRotation.material = new Material(Shader.Find("Sprites/Default"));
                    LineRendererRotation.positionCount = outputRot.Length;
                    LineRendererRotation.startWidth = 0.1f;
                    LineRendererRotation.endWidth = 0.1f;
                    LineRendererRotation.startColor = Color.yellow;
                    LineRendererRotation.endColor = Color.black;
                    for (int i = 0; i < outputRot.Length; i++)
                    {
                        Debug.Log(outputRot[i]);
                        var vec = outputRot[i];
                        var vec2 = new Vector3(vec.x, vec.y, vec.z);
                        LineRendererRotation.SetPosition(i, vec2);
                    }
                }

                for (int i = 0; i < inputCube.Count; i++)
                {
                    Destroy(inputCube[i]);
                }

                for (int i = 0; i < inputCubeVector.Count; i++)
                {
                    Destroy(inputCubeVector[i]);
                }

                inputCube.Clear();
                inputCubeVector.Clear();

                for (int i = 0; i < KnotCount; i++)
                {
                    inputCube.Add(new GameObject("inputCube" + i));

                    inputCube[i] = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    inputCube[i].transform.position = knot[i].Position;
                    inputCube[i].transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
                    inputCube[i].transform.parent = transform.parent;
                    inputCube[i].layer = 2;
                    inputCube[i].GetComponent<Renderer>().material.color = Color.blue;

                    inputCube.Add(new GameObject("inputCubeVector" + i));


                    inputCubeVector.Add(new GameObject("inputCube" + i));

                    inputCubeVector[i] = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    inputCubeVector[i].transform.position = knot[i].Position;
                    inputCubeVector[i].transform.localPosition = new Vector3(0, 0, 1f);
                    inputCubeVector[i].transform.localScale = new Vector3(0.05f,  0.05f, 1f);
                    inputCubeVector[i].transform.parent = transform.parent;
                    inputCubeVector[i].layer = 2;
                    inputCubeVector[i].GetComponent<Renderer>().material.color = Color.white;
                }

                if (inputCube != null && inputCube.Count != 0)
                {
                    for (int i = 0; i < KnotCount - 1; i++)
                    {
                        inputCube[i].transform.position = knot[i].Position;
                        inputCube[i].transform.rotation = knot[i].Rotation;

                        inputCubeVector[i].transform.position = knot[i].Position;
                        inputCubeVector[i].transform.rotation = knot[i].Rotation;
                    }
                }
                if (KnotCount > inputCube.Count)
                {
                    inputCube.RemoveAt(inputCube.Count - 1);
                    inputCubeVector.RemoveAt(inputCube.Count - 1);
                }

                Debug.Log("Rendered");
            }
        }
        public class Serializer : MonoBehaviour, ISerialize
        {
            public PathTool Instance;

            public Serializer(PathTool instance)
            {
                this.Instance = instance;
            }

            public void ToXML()
            {

                //TODO ハードコーディングをやめる
                var xml = new XDocument(
                     new XElement("Paths",
                          new XElement("Instance",
                               new XElement("Knots", Instance.Knots),
                               new XElement("LockAts", Instance.LookAts),
                               new XElement("Iteration", Instance.Iteration),
                               new XElement("IsLoop", Instance.IsLoop),
                               new XElement("Time", Instance.Time),
                               new XElement("IsCameraShake", Instance.IsCameraShake)
                          )
                     )
                );
                xml.Save(@"C:\Temp\LINQ_to_XML_Sample2.xml");
            }

            public void Serialize(string filename)
            {
                string text = System.IO.Path.Combine(ToolController.RecoveryDirectory, filename + ".xml");
                try
                {
                    if (!Directory.Exists(ToolController.RecoveryDirectory))
                    {
                        Directory.CreateDirectory(ToolController.RecoveryDirectory);
                    }

                    using (FileStream fileStream = new FileStream(text, FileMode.OpenOrCreate))
                    {
                        fileStream.SetLength(0L);
                        new XmlSerializer(this.GetType()).Serialize(fileStream, this);
                    }
                }
                catch (Exception e)
                {
                    Debug.LogException(e);
                }
            }
            public void Deserialize(string filename)
            {
                //var path = System.IO.Instance.Combine(ToolController.RecoveryDirectory, filename + ".xml");
                //if (File.Exists(path))
                //{
                //    List<CameraConfig> list = new List<CameraConfig>();
                //    try
                //    {
                //        using (FileStream fileStream = new FileStream(path, FileMode.Open))
                //        {
                //            list = (new XmlSerializer(list.GetType()).Deserialize(fileStream) as List<CameraConfig>);
                //        }
                //    }
                //    catch (Exception e)
                //    {
                //        Debug.LogException(e);
                //    }
                //
                //}
            }
        }
    }
}